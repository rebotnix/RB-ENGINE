# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := base64
DEFS_Debug := \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-DNODE_OPENSSL_CONF_NAME=nodejs_conf' \
	'-DNODE_OPENSSL_HAS_QUIC' \
	'-DICU_NO_USER_DATA_OVERRIDE' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DBASE64_STATIC_DEFINE' \
	'-DHAVE_NEON64=1' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++17

INCS_Debug := \
	-I$(srcdir)/deps/base64/base64/include \
	-I$(srcdir)/deps/base64/base64/lib

DEFS_Release := \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-DNODE_OPENSSL_CONF_NAME=nodejs_conf' \
	'-DNODE_OPENSSL_HAS_QUIC' \
	'-DICU_NO_USER_DATA_OVERRIDE' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DBASE64_STATIC_DEFINE' \
	'-DHAVE_NEON64=1'

# Flags passed to all source files.
CFLAGS_Release := \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++17

INCS_Release := \
	-I$(srcdir)/deps/base64/base64/include \
	-I$(srcdir)/deps/base64/base64/lib

OBJS := \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/generic/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/tables/tables.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/codec_choose.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/lib.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/neon32/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/ssse3/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/sse41/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/sse42/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/avx/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/avx2/codec.o \
	$(obj).target/$(TARGET)/deps/base64/base64/lib/arch/avx512/codec.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic

LDFLAGS_Release := \
	-pthread \
	-rdynamic

LIBS :=

$(obj).target/deps/base64/libbase64.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/deps/base64/libbase64.a: LIBS := $(LIBS)
$(obj).target/deps/base64/libbase64.a: TOOLSET := $(TOOLSET)
$(obj).target/deps/base64/libbase64.a: $(OBJS)
	$(call create_thin_archive,$@,$^)

# Add target alias
.PHONY: base64
base64: $(obj).target/deps/base64/libbase64.a

# Add target alias to "all" target.
.PHONY: all
all: base64

